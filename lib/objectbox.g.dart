// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/batch.dart';
import 'model/course.dart';
import 'model/student.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2535394326370800492),
      name: 'Batch',
      lastPropertyId: const IdUid(3, 331268794349880189),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7504872588526624895),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8708400035733824825),
            name: 'batchId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 6840406559943873226)),
        ModelProperty(
            id: const IdUid(3, 331268794349880189),
            name: 'batchName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'student', srcEntity: 'Student', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 5286043851590673614),
      name: 'Course',
      lastPropertyId: const IdUid(3, 5781506874438706876),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3803494678456137030),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3146778614114360859),
            name: 'courseId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 7355749796493568647)),
        ModelProperty(
            id: const IdUid(3, 5781506874438706876),
            name: 'courseName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'student', srcEntity: 'Student', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 8345624984550863202),
      name: 'Student',
      lastPropertyId: const IdUid(8, 4545990276339679708),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5045162473505694606),
            name: 'stdId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3751982465243663824),
            name: 'studentId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6804660174275622301)),
        ModelProperty(
            id: const IdUid(3, 5271938821427171184),
            name: 'fname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 512127985384458263),
            name: 'lname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1980018137774765046),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7935089197544328188),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4966565880217638825),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4545990276339679708),
            name: 'batchId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 6867727910004360006),
            relationTarget: 'Batch')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6611210795789637297),
            name: 'course',
            targetId: const IdUid(2, 5286043851590673614))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8345624984550863202),
      lastIndexId: const IdUid(4, 6867727910004360006),
      lastRelationId: const IdUid(1, 6611210795789637297),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Batch: EntityDefinition<Batch>(
        model: _entities[0],
        toOneRelations: (Batch object) => [],
        toManyRelations: (Batch object) => {
              RelInfo<Student>.toOneBacklink(
                      8, object.id, (Student srcObject) => srcObject.batch):
                  object.student
            },
        getId: (Batch object) => object.id,
        setId: (Batch object, int id) {
          object.id = id;
        },
        objectToFB: (Batch object, fb.Builder fbb) {
          final batchIdOffset =
              object.batchId == null ? null : fbb.writeString(object.batchId!);
          final batchNameOffset = object.batchName == null
              ? null
              : fbb.writeString(object.batchName!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, batchIdOffset);
          fbb.addOffset(2, batchNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Batch(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(
              object.student,
              store,
              RelInfo<Student>.toOneBacklink(
                  8, object.id, (Student srcObject) => srcObject.batch),
              store.box<Batch>());
          return object;
        }),
    Course: EntityDefinition<Course>(
        model: _entities[1],
        toOneRelations: (Course object) => [],
        toManyRelations: (Course object) =>
            {RelInfo<Student>.toManyBacklink(1, object.id): object.student},
        getId: (Course object) => object.id,
        setId: (Course object, int id) {
          object.id = id;
        },
        objectToFB: (Course object, fb.Builder fbb) {
          final courseIdOffset = fbb.writeString(object.courseId);
          final courseNameOffset = fbb.writeString(object.courseName);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, courseIdOffset);
          fbb.addOffset(2, courseNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Course(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(
              object.student,
              store,
              RelInfo<Student>.toManyBacklink(1, object.id),
              store.box<Course>());
          return object;
        }),
    Student: EntityDefinition<Student>(
        model: _entities[2],
        toOneRelations: (Student object) => [object.batch],
        toManyRelations: (Student object) =>
            {RelInfo<Student>.toMany(1, object.stdId): object.course},
        getId: (Student object) => object.stdId,
        setId: (Student object, int id) {
          object.stdId = id;
        },
        objectToFB: (Student object, fb.Builder fbb) {
          final studentIdOffset = object.studentId == null
              ? null
              : fbb.writeString(object.studentId!);
          final fnameOffset =
              object.fname == null ? null : fbb.writeString(object.fname!);
          final lnameOffset =
              object.lname == null ? null : fbb.writeString(object.lname!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final usernameOffset = object.username == null
              ? null
              : fbb.writeString(object.username!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          fbb.startTable(9);
          fbb.addInt64(0, object.stdId);
          fbb.addOffset(1, studentIdOffset);
          fbb.addOffset(2, fnameOffset);
          fbb.addOffset(3, lnameOffset);
          fbb.addOffset(4, imageOffset);
          fbb.addOffset(5, usernameOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.addInt64(7, object.batch.targetId);
          fbb.finish(fbb.endTable());
          return object.stdId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Student(
              studentId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              fname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              lname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              stdId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.batch.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.batch.attach(store);
          InternalToManyAccess.setRelInfo(object.course, store,
              RelInfo<Student>.toMany(1, object.stdId), store.box<Student>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Batch] entity fields to define ObjectBox queries.
class Batch_ {
  /// see [Batch.id]
  static final id = QueryIntegerProperty<Batch>(_entities[0].properties[0]);

  /// see [Batch.batchId]
  static final batchId = QueryStringProperty<Batch>(_entities[0].properties[1]);

  /// see [Batch.batchName]
  static final batchName =
      QueryStringProperty<Batch>(_entities[0].properties[2]);
}

/// [Course] entity fields to define ObjectBox queries.
class Course_ {
  /// see [Course.id]
  static final id = QueryIntegerProperty<Course>(_entities[1].properties[0]);

  /// see [Course.courseId]
  static final courseId =
      QueryStringProperty<Course>(_entities[1].properties[1]);

  /// see [Course.courseName]
  static final courseName =
      QueryStringProperty<Course>(_entities[1].properties[2]);
}

/// [Student] entity fields to define ObjectBox queries.
class Student_ {
  /// see [Student.stdId]
  static final stdId =
      QueryIntegerProperty<Student>(_entities[2].properties[0]);

  /// see [Student.studentId]
  static final studentId =
      QueryStringProperty<Student>(_entities[2].properties[1]);

  /// see [Student.fname]
  static final fname = QueryStringProperty<Student>(_entities[2].properties[2]);

  /// see [Student.lname]
  static final lname = QueryStringProperty<Student>(_entities[2].properties[3]);

  /// see [Student.image]
  static final image = QueryStringProperty<Student>(_entities[2].properties[4]);

  /// see [Student.username]
  static final username =
      QueryStringProperty<Student>(_entities[2].properties[5]);

  /// see [Student.password]
  static final password =
      QueryStringProperty<Student>(_entities[2].properties[6]);

  /// see [Student.batch]
  static final batch =
      QueryRelationToOne<Student, Batch>(_entities[2].properties[7]);

  /// see [Student.course]
  static final course =
      QueryRelationToMany<Student, Course>(_entities[2].relations[0]);
}
